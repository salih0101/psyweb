import asyncio
import types

from aiogram import Dispatcher, executor, Bot, types
from states import Registration
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import buttons as btns
import database
import states
import os
from dotenv import load_dotenv, find_dotenv
import logging

from datetime import datetime

load_dotenv(find_dotenv())

bot = Bot(os.getenv('TOKEN'))

logging.basicConfig(filename='spam.log', level=logging.INFO)


dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def start_message(message):
    # ---–ü–æ–ª—É—á–∏—Ç—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    # ---–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ
    checker = database.check_user(user_id)
    if checker:
        await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º PsychoFemme Vebinarüêù\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ',
                             reply_markup=btns.main_menu())
    else:
        await message.answer(
            '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–ª–µ–º!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ò–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!',
            reply_markup=btns.ReplyKeyboardMarkup())
        await Registration.getting_name_state.set()


@dp.message_handler(state=Registration.getting_name_state)
async def get_name(message, state=Registration.getting_name_state):
    user_answer = message.text

    await state.update_data(name=user_answer)
    await message.answer('–ò–º—è —Å–æ—Ö—Ä–∞–Ω–∏–ª!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!', reply_markup=btns.phone_number_kb())

    await Registration.getting_phone_number.set()


@dp.message_handler(state=Registration.getting_phone_number, content_types=['text', 'contact'])
async def get_number(message: types.Message, state=Registration.getting_phone_number):
    user_answer = message.text

    if message.content_type == 'text':
        user_answer = message.text

        if not user_answer.replace('+', '').isdigit():
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            return

    elif message.content_type == 'contact':
        user_answer = message.contact.phone_number

    await state.update_data(number=user_answer)
    await message.answer('–ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–∏–ª!', reply_markup=btns.main_menu())

    await message.answer('–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ωüìù!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ', reply_markup=btns.main_menu())

    all_info = await state.get_data()
    name = all_info.get('name')
    phone_number = all_info.get('number')
    user_id = message.from_user.id
    database.add_user(user_id, name, phone_number)
    # ---–û—Å—Ç–∞–Ω–æ–≤–∫–∞
    await state.finish()



# ---–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(content_types=['text'])
async def main_menu(message):
    user_answer = message.text


    if user_answer == 'üìÑVebinar':
        await message.answer("Vebinarda ishtirok etish uchun kichik anketamizni to`ldiring va '‚úÖTasdiqlash' tugmasini bosing\n\n https://docs.google.com/forms/d/e/1FAIpQLSdftrN5zTDfbmgRIjAVqInzVnjTkviiQgOwLAdelNUriuV9vg/viewform?usp=sf_link", reply_markup=btns.access_kb())

    elif user_answer == '‚úÖTasdiqlash':
        await message.answer(btns.veb)
        await message.answer('...')
        await asyncio.sleep(2)
        await message.answer(btns.veb1, reply_markup=btns.back_main_menu_kb())

    elif user_answer == '–ù–∞–∑–∞–¥üîô':
        await message.answer('‚ùóÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùóÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ', reply_markup=btns.main_menu())



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

